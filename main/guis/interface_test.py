# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'interface.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import os 
import sys
import torch
import pydicom
import numpy as np 

o_path = os.getcwd()
sys.path.append(o_path)
import cv2
import numpy as np 

from torchvision import transforms
from matplotlib import pyplot as plt
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import QPixmap, QImage

from utils import batchpred2mask
from .interface_utils import ImageView
from classification.ImplantClassify_v3 import ImageClassificationModel
from data.split_images import preprocessing
from postprocess.post_utils import check_results
from postprocess.postprocess import keypoints, coordi_switch, calculate_hka, calculate_ldf_mpt
from .Part3 import generete_mask, shrinking_mask, filter_annotation

def resource_path(relative_path):
    """ Get the absolute path to the resource, works for both dev and PyInstaller """
    try:
        base_path = sys._MEIPASS
    except AttributeError:
        base_path = os.path.abspath(".")

    return os.path.join(base_path, relative_path)

class Pip_MainWindow(object):
    def __init__(self, MainWindow, model, device):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(2560, 1600)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        # img display
        self.graphicsView = ImageView(self.centralwidget)
        self.graphicsView.setGeometry(QtCore.QRect(800, 10, 1056, 1500))
        self.graphicsView.setObjectName("graphicsView")
        self.line = QtWidgets.QFrame(self.centralwidget)
        self.line.setGeometry(QtCore.QRect(20, 200, 421, 20))
        self.line.setFrameShape(QtWidgets.QFrame.HLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.Basic_Info = QtWidgets.QLabel(self.centralwidget)
        self.Basic_Info.setGeometry(QtCore.QRect(20, 180, 161, 21))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.Basic_Info.setFont(font)
        self.Basic_Info.setObjectName("Basic_Info")
        self.line_2 = QtWidgets.QFrame(self.centralwidget)
        self.line_2.setGeometry(QtCore.QRect(20, 530, 431, 21))
        self.line_2.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_2.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_2.setObjectName("line_2")
        self.Outcomes = QtWidgets.QLabel(self.centralwidget)
        self.Outcomes.setGeometry(QtCore.QRect(20, 510, 81, 21))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.Outcomes.setFont(font)
        self.Outcomes.setObjectName("Outcomes")
        self.anu_logo = QtWidgets.QLabel(self.centralwidget)
        self.anu_logo.setGeometry(QtCore.QRect(10, 110, 171, 51))
        self.anu_logo.setText("")
        # self.anu_logo.setPixmap(QtGui.QPixmap("guis/ANU-logo.jpg"))
        anu_logo_path = resource_path('guis/ANU-logo.png')
        self.anu_logo.setPixmap(QtGui.QPixmap(anu_logo_path))
        self.anu_logo.setScaledContents(True)
        self.anu_logo.setObjectName("anu_logo")
        self.cpyright_label = QtWidgets.QLabel(self.centralwidget)
        self.cpyright_label.setGeometry(QtCore.QRect(70, 760, 301, 81))
        self.cpyright_label.setObjectName("cpyright_label")
        # res
        self.textBrowser_hkaa = QtWidgets.QTextBrowser(self.centralwidget)
        self.textBrowser_hkaa.setGeometry(QtCore.QRect(80, 550, 256, 31))
        self.textBrowser_hkaa.setObjectName("textBrowser_hkaa")
        self.label_hkaa = QtWidgets.QLabel(self.centralwidget)
        self.label_hkaa.setGeometry(QtCore.QRect(20, 560, 54, 12))
        self.label_hkaa.setObjectName("label_hkaa")
        self.label_LDFA = QtWidgets.QLabel(self.centralwidget)
        self.label_LDFA.setGeometry(QtCore.QRect(20, 610, 54, 12))
        self.label_LDFA.setObjectName("label_LDFA")
        self.textBrowser_ldfa = QtWidgets.QTextBrowser(self.centralwidget)
        self.textBrowser_ldfa.setGeometry(QtCore.QRect(80, 600, 256, 31))
        self.textBrowser_ldfa.setObjectName("textBrowser_ldfa")
        self.label_LDFA_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_LDFA_2.setGeometry(QtCore.QRect(20, 660, 54, 12))
        self.label_LDFA_2.setObjectName("label_LDFA_2")
        self.label_aHKA = QtWidgets.QLabel(self.centralwidget)
        self.label_aHKA.setGeometry(QtCore.QRect(20, 710, 54, 12))
        self.label_aHKA.setObjectName("label_aHKA")
        self.textBrowser_mpta = QtWidgets.QTextBrowser(self.centralwidget)
        self.textBrowser_mpta.setGeometry(QtCore.QRect(80, 650, 256, 31))
        self.textBrowser_mpta.setObjectName("textBrowser_mpta")
        self.textBrowser_ahka = QtWidgets.QTextBrowser(self.centralwidget)
        self.textBrowser_ahka.setGeometry(QtCore.QRect(80, 700, 256, 31))
        self.textBrowser_ahka.setObjectName("textBrowser_ahka")
        self.line_3 = QtWidgets.QFrame(self.centralwidget)
        self.line_3.setGeometry(QtCore.QRect(20, 740, 431, 16))
        self.line_3.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_3.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_3.setObjectName("line_3")
        # display checkbx
        self.checkBox_seg = QtWidgets.QCheckBox(self.centralwidget)
        self.checkBox_seg.setGeometry(QtCore.QRect(390, 690, 91, 16))
        self.checkBox_seg.setObjectName("checkBox_seg")
        self.checkBox_landmarks = QtWidgets.QCheckBox(self.centralwidget)
        self.checkBox_landmarks.setGeometry(QtCore.QRect(390, 720, 111, 16))
        self.checkBox_landmarks.setObjectName("checkBox_landmarks")
        self.checkBox_seg.stateChanged.connect(self.vis_results)
        self.checkBox_landmarks.stateChanged.connect(self.vis_results)
        self.verticalScrollBar = QtWidgets.QScrollBar(self.centralwidget)
        self.verticalScrollBar.setGeometry(QtCore.QRect(500, 60, 16, 121))
        self.verticalScrollBar.setOrientation(QtCore.Qt.Vertical)
        self.verticalScrollBar.setObjectName("verticalScrollBar")
        self.listWidget = QtWidgets.QListWidget(self.centralwidget)
        self.listWidget.setGeometry(QtCore.QRect(230, 60, 456, 121))
        self.listWidget.setObjectName("listWidget")
        self.listWidget.itemClicked.connect(self.show_inf_result)
        self.formLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.formLayoutWidget.setGeometry(QtCore.QRect(20, 220, 451, 151))
        self.formLayoutWidget.setObjectName("formLayoutWidget")
        self.formLayout = QtWidgets.QFormLayout(self.formLayoutWidget)
        self.formLayout.setContentsMargins(0, 0, 0, 0)
        # basic Info
        self.formLayout.setObjectName("formLayout")
        self.label_ass_num = QtWidgets.QLabel(self.formLayoutWidget)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(12)
        self.label_ass_num.setFont(font)
        self.label_ass_num.setObjectName("label_ass_num")
        self.formLayout.setWidget(0, QtWidgets.QFormLayout.LabelRole, self.label_ass_num)
        self.txtBrow_accNum = QtWidgets.QTextBrowser(self.formLayoutWidget)
        self.txtBrow_accNum.setObjectName("txtBrow_accNum")
        self.formLayout.setWidget(0, QtWidgets.QFormLayout.FieldRole, self.txtBrow_accNum)
        self.label_Patient_ID = QtWidgets.QLabel(self.formLayoutWidget)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(12)
        self.label_Patient_ID.setFont(font)
        self.label_Patient_ID.setObjectName("label_Patient_ID")
        self.formLayout.setWidget(1, QtWidgets.QFormLayout.LabelRole, self.label_Patient_ID)
        self.txtBrow_id = QtWidgets.QTextBrowser(self.formLayoutWidget)
        self.txtBrow_id.setObjectName("txtBrow_id")
        self.formLayout.setWidget(1, QtWidgets.QFormLayout.FieldRole, self.txtBrow_id)
        self.label_gender = QtWidgets.QLabel(self.formLayoutWidget)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(12)
        self.label_gender.setFont(font)
        self.label_gender.setObjectName("label_gender")
        self.formLayout.setWidget(2, QtWidgets.QFormLayout.LabelRole, self.label_gender)
        self.txtBrow_sex = QtWidgets.QTextBrowser(self.formLayoutWidget)
        self.txtBrow_sex.setObjectName("txtBrow_sex")
        self.formLayout.setWidget(2, QtWidgets.QFormLayout.FieldRole, self.txtBrow_sex)
        self.label_Age = QtWidgets.QLabel(self.formLayoutWidget)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(12)
        self.label_Age.setFont(font)
        self.label_Age.setObjectName("label_Age")
        self.formLayout.setWidget(3, QtWidgets.QFormLayout.LabelRole, self.label_Age)
        self.txtBrow_age = QtWidgets.QTextBrowser(self.formLayoutWidget)
        self.txtBrow_age.setObjectName("txtBrow_age")
        self.formLayout.setWidget(3, QtWidgets.QFormLayout.FieldRole, self.txtBrow_age)
        self.label_dob = QtWidgets.QLabel(self.formLayoutWidget)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(12)
        self.label_dob.setFont(font)
        self.label_dob.setObjectName("label_dob")
        self.formLayout.setWidget(4, QtWidgets.QFormLayout.LabelRole, self.label_dob)
        self.txtBrow_age_2 = QtWidgets.QTextBrowser(self.formLayoutWidget)
        self.txtBrow_age_2.setObjectName("txtBrow_age_2")
        self.formLayout.setWidget(4, QtWidgets.QFormLayout.FieldRole, self.txtBrow_age_2)
        self.formLayoutWidget_2 = QtWidgets.QWidget(self.centralwidget)
        self.formLayoutWidget_2.setGeometry(QtCore.QRect(20, 390, 384, 81))
        self.formLayoutWidget_2.setObjectName("formLayoutWidget_2")
        self.formLayout_3 = QtWidgets.QFormLayout(self.formLayoutWidget_2)
        self.formLayout_3.setContentsMargins(0, 0, 0, 0)
        self.formLayout_3.setObjectName("formLayout_3")
        # running control
        self.progressBar = QtWidgets.QProgressBar(self.formLayoutWidget_2)
        self.progressBar.setProperty("value", 0)
        self.progressBar.setObjectName("progressBar")
        self.formLayout_3.setWidget(1, QtWidgets.QFormLayout.FieldRole, self.progressBar)
        self.cmd_measure_begin = QtWidgets.QCommandLinkButton(self.formLayoutWidget_2)
        self.cmd_measure_begin.setObjectName("cmd_measure_begin")
        self.formLayout_3.setWidget(0, QtWidgets.QFormLayout.FieldRole, self.cmd_measure_begin)
        self.title = QtWidgets.QLabel(self.centralwidget)
        self.title.setGeometry(QtCore.QRect(20, 10, 441, 41))
        self.cmd_measure_begin.clicked.connect(self.inf_imgs)
        
        # CBR hospital label
        font = QtGui.QFont()
        font.setFamily("Book Antiqua")
        font.setPointSize(14)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.title.setFont(font)
        self.title.setObjectName("title")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(10, 60, 171, 41))
        self.label.setText("")
        # self.label.setPixmap(QtGui.QPixmap("guis/CBRhospital_logo.png"))
        image_path = resource_path('guis/CBRhospital_logo.png')
        self.label.setPixmap(QtGui.QPixmap(image_path))
        self.label.setScaledContents(True)
        self.label.setObjectName("label")
        # Menu bar
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1150, 22))
        self.menubar.setObjectName("menubar")
        self.menu_File = QtWidgets.QMenu(self.menubar)
        self.menu_File.setObjectName("menu_File")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionOpen_File = QtWidgets.QAction(MainWindow)
        self.actionOpen_File.setObjectName("actionOpen_File")
        
        self.actionOpen_Directory = QtWidgets.QAction(MainWindow)
        self.actionOpen_Directory.setObjectName("actionOpen_Directory")
        self.actionSave = QtWidgets.QAction(MainWindow)
        self.actionSave.setObjectName("actionSave")
        self.menu_File.addAction(self.actionOpen_File)
        self.menu_File.addAction(self.actionOpen_Directory)
        self.menu_File.addAction(self.actionSave)
        
        self.actionOpen_File.triggered.connect(self.load_img_infos)
        self.menubar.addAction(self.menu_File.menuAction())

        self.open_file_dialog = QtWidgets.QFileDialog()

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        
        # model & data transform
        self.image_augumentator = transforms.Compose([transforms.ToTensor()])
        self.model = model
        self.device = device
        self.model.to(device)
        self.model.eval()
        self.model.render_head.mode = 'inference'

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.Basic_Info.setText(_translate("MainWindow", "Basic Infos"))
        self.Outcomes.setText(_translate("MainWindow", "Outcomes"))
        self.cpyright_label.setText(_translate("MainWindow", "copyrights:XXX"))
        self.label_hkaa.setText(_translate("MainWindow", "HKAA"))
        self.label_LDFA.setText(_translate("MainWindow", "LDFA"))
        self.label_LDFA_2.setText(_translate("MainWindow", "MPTA"))
        self.label_aHKA.setText(_translate("MainWindow", "aHKA"))
        self.checkBox_seg.setText(_translate("MainWindow", "show masks"))
        self.checkBox_landmarks.setText(_translate("MainWindow", "show landmarks"))
        self.label_ass_num.setText(_translate("MainWindow", "Accession Number"))
        self.label_Patient_ID.setText(_translate("MainWindow", "Patient ID"))
        self.label_gender.setText(_translate("MainWindow", "Gender"))
        self.label_Age.setText(_translate("MainWindow", "Age"))
        self.label_dob.setText(_translate("MainWindow", "Date of Birth"))
        self.cmd_measure_begin.setText(_translate("MainWindow", "Begin Measurement"))
        self.title.setText(_translate("MainWindow", "Mechanical Alignment Analytical Pipeline"))
        self.menu_File.setTitle(_translate("MainWindow", "&File"))
        self.actionOpen_File.setText(_translate("MainWindow", "&Open File"))
        self.actionOpen_Directory.setText(_translate("MainWindow", "&Open Directory"))
        self.actionSave.setText(_translate("MainWindow", "&Save"))
    
    def load_img_infos(self):
        self.imgs = []
        self.img_shows = []
        self.accNums = []
        self.ages = []
        self.sexs = []
        self.ids = []
        self.dobs = []
        self.file_paths, _ = self.open_file_dialog.getOpenFileNames(None, "Open file", ".", "Images (*.png *.xpm *.jpg *.dcm)")
        if self.file_paths:
            for file_path in self.file_paths:
                dcm_file = pydicom.read_file(file_path)
                img = dcm_file.pixel_array
                self.img = self.Uint16toUint8(img)
                height, width = self.img.shape
                
                # show images
                img_show = cv2.resize(self.img, (width//2, height//2), interpolation = cv2.INTER_LINEAR)
                h, w = img_show.shape
                self.scene = QtWidgets.QGraphicsScene(0, 0, w, h)
                self.graphicsView.setScene(self.scene)  
                self.img_show = np.repeat(img_show[:, :, None], 3, axis=-1)
                # img_show = cv2.cvtColor(img_show, cv2.COLOR_GRAY2BGR)	
                pixmap = np2pixmap(self.img_show)
                self.scene.addPixmap(pixmap)         
            
                # show basic infos
                self.txtBrow_accNum.setText(dcm_file[0x0008, 0x0050].value)  
                self.txtBrow_id.setText(str(dcm_file[0x0010, 0x0010].value))
                self.txtBrow_age.setText(dcm_file[0x0010, 0x1010].value)
                self.txtBrow_sex.setText(dcm_file[0x0010, 0x0040].value)
                self.txtBrow_age_2.setText(dcm_file[0x0010, 0x0030].value)
                
                # add items
                self.listWidget.addItem(file_path)
                self.imgs.append(self.img)
                self.img_shows.append(self.img_show)
                self.accNums.append(dcm_file[0x0008, 0x0050].value)
                self.ages.append(dcm_file[0x0010, 0x1010].value)
                self.sexs.append(dcm_file[0x0010, 0x0040].value)
                self.ids.append(dcm_file[0x0010, 0x0010].value)
                self.dobs.append(dcm_file[0x0010, 0x0030].value)
                self.current_img = self.img
                
      
    
    def Uint16toUint8(self, img):
        """Convert the image dtype from uint16 to uint8
        Reproduce the result of cv2.imread(img, cv2.IMREAD_GRAYSCALE)
        Args:
            img (np.array([h, w])): the uint16 image

        Returns:
            np.array([h, w]: the uint8 image
        """
        img = img / 65535.0 * 255
        return np.uint8(255 * (img - img.min()) / (img.max() - img.min()) + 0.5)
    
    def inf_imgs(self):
        
        self.change_infos = []
        self.masks = []
        self.points = []
        for img in self.imgs:
            self.progressBar.setValue(0)
            right_part, ratio_h_r, ratio_w_r, tp_pd_r, lft_pad_r, bttm_pad_r, rgt_pad_r = preprocessing(img, side="right", rgb=False, enhance=True, size=(256, 2048))
            left_part, ratio_h_l, ratio_w_l, tp_pd_l, lft_pad_l, bttm_pad_l, rgt_pad_l = preprocessing(img, side="left", rgb=False, enhance=True, size=(256, 2048))
            chang_info_r = {'ratio_height': ratio_h_r, 'ratio_width': ratio_w_r, 
                            "top_padding": tp_pd_r, "left_padding": lft_pad_r, 
                            "bottom_padding": bttm_pad_r, 'right_padding': rgt_pad_r}
            chang_info_l = {'ratio_height': ratio_h_l, 'ratio_width': ratio_w_l, 
                            "top_padding": tp_pd_l, "left_padding": lft_pad_l, 
                            "bottom_padding": bttm_pad_l, 'right_padding': rgt_pad_l}
            imgs = []
            for img_single in [right_part, left_part]:
                imgs.append(self.image_augumentator(img_single))
            img_batch = torch.stack(imgs, dim=0).to(self.device)
            self.progressBar.setValue(25)
            masks = self.model(img_batch)['fine_pred']
            masks = batchpred2mask(masks).cpu().numpy().astype('uint8')
            self.progressBar.setValue(50)
            
            # Detect keypoints
            # Get the classification of implants
            classify_model = ImageClassificationModel(data_dir=None, num_epochs=None)
            classify_model = classify_model.load("./best_model/best_classification_model.pth")
            prediction = classify_model.predict(img)
            
            # If there are implants in knees
            if prediction == 2:
                points_r = self.key_point_detect(masks[0], 1, chang_info_r)
                points_l = self.key_point_detect(masks[1], 2, chang_info_l)
            # Otherwise
            else:
                points_r = self.key_point_detect(masks[0], 1, chang_info_r)
                points_l = self.key_point_detect(masks[1], 2, chang_info_l)
            
            self.change_infos.append((chang_info_r, chang_info_l))
            self.masks.append(masks)
            self.points.append((points_r, points_l))
            self.progressBar.setValue(100)
            # self.show_results(points_r, points_l)
            # self.generate_seg_vis(masks, chang_info_r, chang_info_l) 
            # self.generate_points_vis(points_r, points_l)
            # self.generate_points_seg_vis(points_r, points_l)
            # self.progressBar.setValue(100)

    def show_inf_result(self):
        self.checkBox_seg.setChecked(False)
        self.checkBox_landmarks.setChecked(False)
        item = self.listWidget.selectedItems()[0] 
        indx = self.listWidget.indexFromItem(item).row()

        self.current_img = self.imgs[indx]
        if hasattr(self, 'img_shows') and indx < len(self.img_shows):
            img_show = self.img_shows[indx]
            pixmap = np2pixmap(img_show)
            self.scene.addPixmap(pixmap)
        if hasattr(self, 'accNums') and indx < len(self.accNums):
            acc_num = self.accNums[indx]
            self.txtBrow_accNum.setText(acc_num) 
        if hasattr(self, 'ages') and indx < len(self.ages):
            age = self.ages[indx]
            self.txtBrow_age.setText(age) 
        if hasattr(self, 'ids') and indx < len(self.ids):
            pid = self.ids[indx]
            self.txtBrow_id.setText(str(pid)) 
        if hasattr(self, 'dobs') and indx < len(self.dobs):
            dob = self.dobs[indx]
            self.txtBrow_age_2.setText(dob) 
        if hasattr(self, 'sexs') and indx < len(self.sexs):
            sex = self.sexs[indx]
            self.txtBrow_sex.setText(sex)      
        if hasattr(self, 'points') and indx < len(self.points):
            points_r, points_l = self.points[indx]
            self.show_results(points_r, points_l)
        if hasattr(self, 'masks') and indx < len(self.masks) and hasattr(self, 'change_infos') and indx < len(self.change_infos):
            mask = self.masks[indx]
            chang_info_r, chang_info_l = self.change_infos[indx]
            self.generate_seg_vis(mask, chang_info_r, chang_info_l, indx) 
            self.generate_points_vis(points_r, points_l, indx)
            self.generate_points_seg_vis(points_r, points_l)
            
        
           
        
    def key_point_detect(self, mask, side, chang_info):
        key_points = keypoints(mask, 8, 24)
        femur_head = key_points['femur_head']
        FemurHead_radius = key_points['radius']
        condylar_midway = key_points['condylar_midway']
        condylar_leftpeak = key_points['condylar_leftpeak']
        condylar_rightpeak = key_points['condylar_rightpeak']
        plateau_center = key_points['plateau_center']
        plateau_left = key_points['plateau_left']
        plateau_right = key_points['plateau_right']
        plafond_center = key_points['plafond_center']
        is_good_femur = key_points['good_femur']
        is_good_tibia = key_points['good_tibia']
        key_point_list = [femur_head, condylar_midway, condylar_leftpeak, condylar_rightpeak,
                          plateau_center, plateau_left, plateau_right, plafond_center]
        femur_head, condylar_midway, condylar_leftpeak, condylar_rightpeak, plateau_center, plateau_left, plateau_right, plafond_center \
            = coordi_switch(key_point_list, chang_info, side, 512)
        hka = calculate_hka(femur_head, condylar_midway, plateau_center, plafond_center)
        ldfa, mpta = calculate_ldf_mpt(condylar_leftpeak, condylar_rightpeak, plateau_left, plateau_right, femur_head, condylar_midway, plateau_center, plafond_center)
        if side == 2 and hka is not None:
            hka = -hka
        if ldfa is None or mpta is None:
            plus = None 
            minus = None
        else:
            plus = ldfa +  mpta
            minus = mpta - ldfa
        
        tmp = {'side': side,
               'FemurHead_radius': FemurHead_radius,
               'good_femur': is_good_femur,
               'good_tibia': is_good_tibia,
               'femur_head_x': femur_head[0], 'femur_head_y': femur_head[1],
               'condylar_midway_x': condylar_midway[0], 'condylar_midway_y': condylar_midway[1],
               'condylar_leftpeak_x': condylar_leftpeak[0], 'condylar_leftpeak_y': condylar_leftpeak[1],
               'condylar_rightpeak_x': condylar_rightpeak[0], 'condylar_rightpeak_y': condylar_rightpeak[1],          
               'plateau_center_x': plateau_center[0], 'plateau_center_y': plateau_center[1], 
               'plateau_left_x': plateau_left[0], 'plateau_left_y': plateau_left[1], 
               'plateau_right_x': plateau_right[0], 'plateau_right_y': plateau_right[1], 
               'plafond_center_x': plafond_center[0], 'plafond_center_y': plafond_center[1],
               'hka': hka,
               'LDFA': ldfa,
               'MPTA': mpta,
               'LDFA+MPTA': plus,
               'MPTA-LDFA': minus}
        
        is_good_result = check_results(**tmp)  
        
        if not is_good_result:
            for k in ['hka', 'cpa', 'LDFA', 'MPTA', 'LDFA+MPTA', 'MPTA-LDFA']:
                tmp[k] = None

        return tmp
    
    def show_results(self, dicts_r, dict_l):
        angles = ['hka', 'LDFA', 'MPTA', 'MPTA-LDFA']
        txtBrowsers = [self.textBrowser_hkaa, self.textBrowser_ldfa, self.textBrowser_mpta, self.textBrowser_ahka]
        for angle, txtBrowser in zip(angles, txtBrowsers):
            Ang_r = round(dicts_r[angle], 1) if dicts_r[angle] is not None else None 
            Ang_l = round(dict_l[angle], 1) if dict_l[angle] is not None else None 
            txtBrowser.setText(f"right: {Ang_r}, left: {Ang_l}")
        # self.textBrowser_hkaa.setText(f"right: {round(dicts_r['hka'], 1)}, left: {round(dict_l['hka'], 1)}")
        # self.textBrowser_ldfa.setText(f"right: {round(dicts_r['LDFA'], 1)}, left: {round(dict_l['LDFA'], 1)}")
        # self.textBrowser_mpta.setText(f"right: {round(dicts_r['MPTA'], 1)}, left: {round(dict_l['MPTA'], 1)}")
        # self.textBrowser_ahka.setText(f"right: {round(dicts_r['MPTA-LDFA'], 1)}, left: {round(dict_l['MPTA-LDFA'], 1)}")
    
    
    def generate_seg_vis(self, masks, chang_info_r, chang_info_l, indx):
        mask_r = filter_annotation(masks[1])
        mask_l = filter_annotation(masks[0])
        img = self.imgs[indx]
        merge_mask = generete_mask(img, mask_l, mask_r, chang_info_r, chang_info_l, rszd_w=256)
        merge_mask = cv2.resize(merge_mask, img.shape[::-1], cv2.INTER_LANCZOS4)
        merge_mask = shrinking_mask(merge_mask, ksize=7, sigma=16, shrinking_level=1)
        img_show = np.repeat(img[:, :, None], 3, axis=-1)
        self.img_seg = cv2.addWeighted(img_show, 0.9, merge_mask, 0.1, 0)
    
        
    def generate_points_vis(self, points_r, points_l, indx):
        img = self.imgs[indx]
        self.img_line = np.repeat(img[:, :, None], 3, axis=-1)
        # mechnical axis of femur
        keys = ['femur_head_x', 'femur_head_y', 'condylar_midway_x', 'condylar_midway_y']
        self.img_line = self.vis_single_line(self.img_line, points_l, points_r, keys, color=(255, 0, 0))
        # mechnical axis of tibia
        keys = ['plateau_center_x', 'plateau_center_y', 'plafond_center_x', 'plafond_center_y']
        self.img_line = self.vis_single_line(self.img_line, points_l, points_r, keys, color=(0, 255, 0))
        # femur tangent
        keys = ['condylar_leftpeak_x', 'condylar_leftpeak_y', 'condylar_rightpeak_x', 'condylar_rightpeak_y']
        self.img_line = self.vis_single_line(self.img_line, points_l, points_r, keys, color=(255, 0, 255))
        # tibia tangent
        keys = ['plateau_left_x', 'plateau_left_y', 'plateau_right_x', 'plateau_right_y']
        self.img_line = self.vis_single_line(self.img_line, points_l, points_r, keys, color=(0, 0, 255))
        
    def generate_points_seg_vis(self, points_r, points_l):
        self.img_line_seg = np.copy(self.img_seg)
        # mechnical axis of femur
        keys = ['femur_head_x', 'femur_head_y', 'condylar_midway_x', 'condylar_midway_y']
        self.img_line_seg = self.vis_single_line(self.img_line_seg, points_l, points_r, keys, color=(255, 0, 0))
        # mechnical axis of tibia
        keys = ['plateau_center_x', 'plateau_center_y', 'plafond_center_x', 'plafond_center_y']
        self.img_line_seg = self.vis_single_line(self.img_line_seg, points_l, points_r, keys, color=(0, 255, 0))
        # femur tangent
        keys = ['condylar_leftpeak_x', 'condylar_leftpeak_y', 'condylar_rightpeak_x', 'condylar_rightpeak_y']
        self.img_line_seg = self.vis_single_line(self.img_line_seg, points_l, points_r, keys, color=(255, 0, 255))
        # tibia tangent
        keys = ['plateau_left_x', 'plateau_left_y', 'plateau_right_x', 'plateau_right_y']
        self.img_line_seg = self.vis_single_line(self.img_line_seg, points_l, points_r, keys, color=(0, 0, 255))  

              
                
                
    def vis_single_line(self, img, points_l, points_r, keys, color):
        
        if points_r[keys[0]] is not None and points_r[keys[2]] is not None:
            line = [(int(points_r[keys[0]]), int(points_r[keys[1]])), (int(points_r[keys[2]]), int(points_r[keys[3]]))]
            img = cv2.line(img, pt1=line[0], pt2=line[1], color=color, thickness=2)
            for pt in line:
                img = cv2.circle(img, pt, 5, color=color, thickness=6)
        if points_l[keys[0]] is not None and points_l[keys[2]] is not None:
            line = [(int(points_l[keys[0]]), int(points_l[keys[1]])), (int(points_l[keys[2]]), int(points_l[keys[3]]))]
            img = cv2.line(img, pt1 = line[0], pt2=line[1], color=color, thickness=2)
            for pt in line:
                img = cv2.circle(img, pt, 5, color=color, thickness=6)
        return img
    
    def vis_results(self):
        if self.checkBox_seg.isChecked() and not self.checkBox_landmarks.isChecked() and getattr(self, 'img_seg', None) is not None:
            self.vis_single_res(self.img_seg)
        elif not self.checkBox_seg.isChecked() and self.checkBox_landmarks.isChecked() and getattr(self, 'img_line', None) is not None:
            self.vis_single_res(self.img_line)
        elif self.checkBox_seg.isChecked() and self.checkBox_landmarks.isChecked() and getattr(self, 'img_line_seg', None) is not None:
            self.vis_single_res(self.img_line_seg)
        elif not self.checkBox_seg.isChecked() and not self.checkBox_landmarks.isChecked() and getattr(self, 'img', None) is not None:
            self.vis_single_res(np.repeat(self.current_img[:, :, None], 3, axis=-1))
        
    
    def vis_single_res(self, img):
        H, W = img.shape[:2]
        img_show = cv2.resize(img, (W//2, H//2), interpolation = cv2.INTER_LINEAR)
        # img_show = cv2.cvtColor(img_show, cv2.COLOR_GRAY2BGR)	
        pixmap = np2pixmap(img_show)
        self.scene.addPixmap(pixmap)
         
        
        
def np2pixmap(np_img):
    height, width, channel = np_img.shape
    bytesPerLine = 3 * width
    qImg = QImage(np_img.data, width, height, bytesPerLine, QImage.Format_RGB888)
    return QPixmap.fromImage(qImg)


